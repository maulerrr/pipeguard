#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import streamlit as st
import pandas as pd
import joblib
import openai_utils

@st.cache_resource
def load_model():
    artifact = joblib.load("model.pkl")
    return artifact["model"], artifact["features"]

def feature_engineering(df: pd.DataFrame):
    df["timestamp"] = pd.to_datetime(df["timestamp"])
    df = df.sort_values(["run_id", "timestamp"])
    df["delta"] = (
        df.groupby("run_id")["timestamp"]
          .diff()
          .dt.total_seconds()
          .fillna(0)
    )
    stages_ohe = pd.get_dummies(df["stage"], prefix="stage")
    X = pd.concat([df[["delta"]], stages_ohe], axis=1)
    return X

st.title("–ê–Ω–æ–º–∞–ª–∏–∏ CI/CD –ª–æ–≥–æ–≤")
model, feature_cols = load_model()

uploaded = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON-—Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤",
    type="json",
    accept_multiple_files=True
)

if uploaded:
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    dfs = [pd.read_json(f) for f in uploaded]
    data = pd.concat(dfs, ignore_index=True)

    # 2. –§–∏—á–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    X = feature_engineering(data)
    for col in feature_cols:
        if col not in X.columns:
            X[col] = 0
    X = X[feature_cols]

    preds = model.predict(X)
    data["anomaly"] = preds == -1

    # 3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏")
    st.write("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:", len(data))
    st.write("–ê–Ω–æ–º–∞–ª–∏–π:", int(data["anomaly"].sum()))
    st.dataframe(data[data["anomaly"]])

    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI
    if data["anomaly"].any():
        if st.button("üîç –û–ø–∏—Å–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ (OpenAI)"):
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ‚Ä¶"):
                simple_list = data[data["anomaly"]][
                    ["run_id", "stage", "timestamp", "message"]
                ].to_dict(orient="records")
                try:
                    summary = openai_utils.describe_anomalies(simple_list)
                    st.markdown("**–û–±–∑–æ—Ä –∞–Ω–æ–º–∞–ª–∏–π:**")
                    st.write(summary)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI: {e}")

    # 5. –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    csv = data.to_csv(index=False).encode("utf-8")
    st.download_button(
        "–°–∫–∞—á–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –º–µ—Ç–∫–æ–π",
        data=csv,
        file_name="results.csv",
        mime="text/csv"
    )
