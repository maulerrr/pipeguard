import streamlit as st
import pandas as pd
from typing import List, Dict, Any
import openai_utils

st.set_page_config(page_title="–ê–Ω–æ–º–∞–ª–∏–∏ CI/CD –ª–æ–≥–æ–≤", layout="wide")
st.title("üîç –ê–Ω–æ–º–∞–ª–∏–∏ CI/CD –ª–æ–≥–æ–≤")


threshold = st.sidebar.slider(
    "–ü–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∞–Ω–æ–º–∞–ª–∏–∏",
    min_value=0.0, max_value=1.0, value=0.5, step=0.01
)

uploaded = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ JSON-—Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤",
    type="json",
    accept_multiple_files=True
)

if uploaded:
    dfs = []
    for f in uploaded:
        try:
            dfs.append(pd.read_json(f))
        except ValueError:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {f.name}")
    if not dfs:
        st.error("–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö JSON-—Ñ–∞–π–ª–æ–≤")
        st.stop()

    data = pd.concat(dfs, ignore_index=True)
    st.sidebar.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", len(data))
    
    records: List[Dict[str, Any]] = data.to_dict(orient="records")
    anomalies = openai_utils.detect_anomalies(records, threshold=threshold)
    n_anom = len(anomalies)
    st.sidebar.metric("–ù–∞–π–¥–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π", n_anom)
    
    if n_anom:
        df_anom = pd.DataFrame(anomalies)
        
        df_anom = df_anom.sort_values("anomaly_prob", ascending=False)
        st.subheader("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π")
        st.dataframe(
            df_anom[[
                "anomaly_prob", "run_id", "stage", "status", "timestamp", "message"
            ]],
            use_container_width=True
        )
        
        if st.button("üìù –û–ø–∏—Å–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏"):
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–∑–æ—Ä‚Ä¶"):
                try:
                    summary = openai_utils.describe_anomalies(anomalies)
                    st.markdown("**–û–±–∑–æ—Ä –∞–Ω–æ–º–∞–ª–∏–π (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):**")
                    st.write(summary)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI: {e}")
    else:
        st.info("–ê–Ω–æ–º–∞–ª–∏–π –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    df_all = data.copy()
    df_all["anomaly_prob"] = 0.0
    for rec in anomalies:
        
        mask = (
            (df_all["run_id"] == rec["run_id"]) &
            (df_all["timestamp"].astype(str) == str(rec["timestamp"])) &
            (df_all["stage"] == rec["stage"])
        )
        df_all.loc[mask, "anomaly_prob"] = rec["anomaly_prob"]

    csv = df_all.to_csv(index=False).encode("utf-8")
    st.download_button(
        "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏)",
        data=csv,
        file_name="cicd_anomaly_results.csv",
        mime="text/csv"
    )
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON-—Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
